name: Infrastructure (Terraform)

on:
  pull_request:
    branches: ["main"]
    paths: ["terraform/**"]
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        run: terraform fmt -check
        working-directory: ./terraform

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./terraform

      - name: Create ECR Repository
        run: |
          if ! aws ecr describe-repositories --repository-names growfat-flask-private-repository &> /dev/null; then
            echo "Creating ECR repository: growfat-flask-private-repository"
            aws ecr create-repository --repository-name growfat-flask-private-repository --image-scanning-configuration scanOnPush=true
          else
            echo "ECR repository already exists: growfat-flask-private-repository"
          fi

      - name: Handle Existing Resources
        run: |
          # Check and import resources only if not already in state
          
          # Task role
          if ! terraform state show aws_iam_role.ecs_task_role &> /dev/null && aws iam get-role --role-name growfat-ecs-xray-taskrole &> /dev/null; then
            echo "Importing existing task role..."
            terraform import aws_iam_role.ecs_task_role growfat-ecs-xray-taskrole
          fi

          # Execution role
          if ! terraform state show aws_iam_role.ecs_execution_role &> /dev/null && aws iam get-role --role-name growfat-ecs-xray-taskexecutionrole &> /dev/null; then
            echo "Importing existing execution role..."
            terraform import aws_iam_role.ecs_execution_role growfat-ecs-xray-taskexecutionrole
          fi
          
          # CloudWatch log group
          if ! terraform state show aws_cloudwatch_log_group.ecs_log_group &> /dev/null && aws logs describe-log-groups --log-group-name-prefix "/ecs/growfat-task" --query 'logGroups[0].logGroupName' --output text | grep -q "/ecs/growfat-task"; then
            echo "Importing existing log group..."
            terraform import aws_cloudwatch_log_group.ecs_log_group "/ecs/growfat-task"
          fi
          
          # ECS service
          if ! terraform state show aws_ecs_service.growfat_service &> /dev/null && aws ecs describe-services --cluster growfat-flask-ecs --services growfat-service --query 'services[0].serviceName' --output text | grep -q "growfat-service"; then
            echo "Importing existing ECS service..."
            terraform import aws_ecs_service.growfat_service growfat-flask-ecs/growfat-service
          fi
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - name: Get Task Public IP
        run: |
          echo "Waiting for ECS task to be running..."
          sleep 30

          CLUSTER_NAME="growfat-flask-ecs"
          SERVICE_NAME="growfat-service"

          TASK_ARN=$(aws ecs list-tasks --cluster $CLUSTER_NAME --service-name $SERVICE_NAME --query 'taskArns[0]' --output text)

          if [ -z "$TASK_ARN" ] || [ "$TASK_ARN" == "None" ]; then
            echo "No running tasks found. Waiting longer..."
            sleep 30
            TASK_ARN=$(aws ecs list-tasks --cluster $CLUSTER_NAME --service-name $SERVICE_NAME --query 'taskArns[0]' --output text)
          fi

          ENI_ID=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
          PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query 'NetworkInterfaces[0].Association.PublicIp' --output text)

          echo "=============================================="
          echo "Flask app is available at: http://$PUBLIC_IP:8080"
          echo "=============================================="
