name: Deploy Application

on:
  push:
    branches: ["dev", "uat"]
    paths: ["app.py", "requirements.txt", "Dockerfile"]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - uat

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name || inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/growfat-flask-private-repository:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/growfat-flask-private-repository:latest
          platforms: linux/amd64
          provenance: false

      - name: Create SSM Parameter and Secrets Manager Secret
        id: create-secrets
        run: |
          # Create SSM Parameter
          aws ssm put-parameter \
            --name "/growfat/config" \
            --type "String" \
            --value "${{ secrets.MY_APP_CONFIG }}" \
            --overwrite

          SSM_PARAM_ARN="arn:aws:ssm:ap-southeast-1:$(aws sts get-caller-identity --query Account --output text):parameter/growfat/config"
          echo "SSM_PARAM_ARN=$SSM_PARAM_ARN" >> $GITHUB_OUTPUT

          # Create Secrets Manager Secret
          SECRET_ARN=$(aws secretsmanager create-secret \
            --name "growfat/db_password" \
            --secret-string "${{ secrets.MY_DB_PASSWORD }}" \
            --query 'ARN' --output text 2>/dev/null || \
            aws secretsmanager update-secret \
            --secret-id "growfat/db_password" \
            --secret-string "${{ secrets.MY_DB_PASSWORD }}" \
            --query 'ARN' --output text)

          echo "SECRET_ARN=$SECRET_ARN" >> $GITHUB_OUTPUT

      - name: Update ECS Task Definition
        run: |
          # Get current task definition
          aws ecs describe-task-definition --task-definition growfat-task --query taskDefinition > current-task-def.json

          # Update image and add secrets
          jq --arg IMAGE "${{ steps.login-ecr.outputs.registry }}/growfat-flask-private-repository:${{ github.sha }}" \
             --arg SSM_ARN "${{ steps.create-secrets.outputs.SSM_PARAM_ARN }}" \
             --arg SECRET_ARN "${{ steps.create-secrets.outputs.SECRET_ARN }}" \
             '
             .containerDefinitions[0].image = $IMAGE |
             .containerDefinitions[0].secrets = [
               {"name": "MY_APP_CONFIG", "valueFrom": $SSM_ARN},
               {"name": "MY_DB_PASSWORD", "valueFrom": $SECRET_ARN}
             ] |
             del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)
             ' current-task-def.json > updated-task-def.json

          # Register new task definition
          aws ecs register-task-definition --cli-input-json file://updated-task-def.json

          # Update service
          aws ecs update-service \
            --cluster growfat-flask-ecs \
            --service growfat-service \
            --task-definition growfat-task

          echo "Deployment completed successfully!"